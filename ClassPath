package com.codeminders.hidapi;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class ClassPathLibraryLoader {

    public static boolean loadNativeHIDLibrary() {
        String osName = System.getProperty("os.name").toLowerCase();
        String libPath = "";


        boolean is64Bit = arch.contains("64");

        if (osName.contains("win")) {
            libPath = "native/win/hidapi-jni-64.dll";
        } else if (osName.contains("mac")) {
            libPath = "native/mac/libhidapi-jni-64.jnilib";
        } else if (osName.contains("nux")) {
            libPath = "native/linux/libhidapi-jni-64.so";
        } else {
            System.err.println("Unsupported OS: " + os);
            return false;
        }

        try {
            System.out.println("Attempting to load native library from: " + libPath);

            InputStream in = ClassPathLibraryLoader.class.getResourceAsStream(libPath);
            if (in == null) {
                System.err.println("Library not found at: " + libPath);
                return false;
            }  

            String fileName = libPath.substring(libPath.lastIndexOf('/') + 1);
            File fileOut = File.createTempFile(fileName, null);
            fileOut.deleteOnExit();

            OutputStream out = new FileOutputStream(fileOut);
            byte[] buffer = new byte[1024];
            int len;
            while ((len = in.read(buffer)) > 0) {
                out.write(buffer, 0, len);
            }
            out.close();
            in.close();

            System.load(fileOut.getAbsolutePath());
            System.out.println("Successfully loaded native library.");
            return true;

        } catch (Exception | UnsatisfiedLinkError e) {
            System.err.println("Failed to load native library: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}
